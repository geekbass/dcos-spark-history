{
    "id": "/spark-history",
    "backoffFactor": 1.15,
    "backoffSeconds": 1,
    "cmd": "SPARK_HISTORY_OPTS=\"-Dspark.history.ui.port=18080 ${SPARK_HISTORY_OPTS}\" ./bin/spark-class org.apache.spark.deploy.history.HistoryServer",
    "container": {
      "portMappings": [
        {
          "containerPort": 18080,
          "hostPort": 0,
          "labels": {
            "VIP_0": "spark-history:18080"
          },
          "protocol": "tcp",
          "servicePort": 10468,
          "name": "spark-history"
        }
      ],
      "type": "DOCKER",
      "volumes": [
        {
          "containerPath": "/FS/YOU/CREATED",
          "hostPath": "/FS/YOU/CREATED",
          "mode": "RW"
        }
      ],
      "docker": {
        "image": "mesosphere/spark:2.3.1-2.2.1-2-hadoop-2.6",
        "forcePullImage": false,
        "privileged": false,
        "parameters": []
      }
    },
    "cpus": 0.1,
    "disk": 0,
    "env": {
      "SPARK_USER": "root",
      "SPARK_HISTORY_OPTS": "-Dspark.history.fs.logDirectory=/FS/YOU/CREATED -Dspark.history.fs.cleaner.enabled=true -Dspark.history.fs.cleaner.interval=1d -Dspark.history.fs.cleaner.maxAge=7d",
      "APPLICATION_WEB_PROXY_BASE": "/service/spark-history"
    },
    "healthChecks": [
      {
        "gracePeriodSeconds": 300,
        "intervalSeconds": 60,
        "maxConsecutiveFailures": 3,
        "portIndex": 0,
        "timeoutSeconds": 20,
        "delaySeconds": 15,
        "protocol": "MESOS_HTTP",
        "path": "/"
      }
    ],
    "instances": 1,
    "labels": {
      "DCOS_SERVICE_SCHEME": "http",
      "DCOS_SERVICE_NAME": "spark-history",
      "DCOS_SERVICE_PORT_INDEX": "0"
    },
    "maxLaunchDelaySeconds": 3600,
    "mem": 1024,
    "gpus": 0,
    "networks": [
      {
        "mode": "container/bridge"
      }
    ],
    "requirePorts": false,
    "upgradeStrategy": {
      "maximumOverCapacity": 1,
      "minimumHealthCapacity": 1
    },
    "killSelection": "YOUNGEST_FIRST",
    "unreachableStrategy": {
      "inactiveAfterSeconds": 0,
      "expungeAfterSeconds": 0
    },
    "fetch": [],
    "constraints": []
}